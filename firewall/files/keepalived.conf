{%- set dc_fw = salt['jinja_re.re_replace']('[0-9]', '', grains['id']) %}

{%- if salt['pillar.get']('keepalived', '') != '' %}

{%- set ext_name = salt['pillar.get']('keepalived:keepalived:ext_vip:name') %}
{%- set ext_pass = salt['pillar.get']('keepalived:keepalived:ext_vip:auth_pass') %}
{%- set int_name = salt['pillar.get']('keepalived:keepalived:int_vip:name') %}
{%- set int_pass = salt['pillar.get']('keepalived:keepalived:int_vip:auth_pass') %}

{%- set v_servers = salt['pillar.get']('keepalived:keepalived:v_servers') %}

{%- set state = salt['pillar.get']('keepalived:networks:%s:state' % (grains['id']))|join(' ') %}

{%- set ext_vrid = salt['pillar.get']('keepalived:keepalived:ext_vip:vrid', '1') %}
{%- set int_vrid = salt['pillar.get']('keepalived:keepalived:int_vip:vrid', '2') %}

{%- if state == "MASTER" %}
{%- set prio = 100 %}
{%- else %}
{%- set prio = 50 %}
{%- endif %}
bal_defs {
  router_id LVS_{{ state }} # string identifying the machine
}

vrrp_sync_group de-staging-fw {
  group {
    {{ ext_name }}
    {{ int_name }}
  }
  notify_master "/root/bin/ms_cluster.sh primary"
  notify_backup "/root/bin/ms_cluster.sh backup"
  notify_fault "/root/bin/ms_cluster.sh fault"
}
 
# describe virtual service ip
# VRRP Configuration
vrrp_instance {{ ext_name }} {
  state {{ state }}
  interface eth0
  virtual_router_id {{ ext_vrid }}
  priority {{ prio }}
  authentication {
    auth_type PASS
    auth_pass {{ ext_pass }}
  }
  virtual_ipaddress {
{%- for ip in salt['pillar.get']('keepalived:keepalived:ext_vip:ip') %}
    {{ ip }}/32
{%- endfor %}
  }
}

vrrp_instance {{ int_name }} {
  state {{ state }}
  interface eth1
  virtual_router_id {{ int_vrid }}
  priority {{ prio }}
  authentication {
    auth_type PASS
    auth_pass {{ int_pass }}
  }
  virtual_ipaddress {
{%- for ip in salt['pillar.get']('keepalived:keepalived:int_vip:ip') %}
    {{ ip }}/24
{%- endfor %}
  }
}

{%- endif %}
